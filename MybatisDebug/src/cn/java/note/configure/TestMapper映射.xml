<?xml version="1.0" encoding="UTF-8"?>
<mapper namespace="com.test.bean.TestMapper"> <!-- builderAssistant.setCurrentNamespace("com.test.bean.TestMapper"); -->
   	
   	<!-- 多个Mapper共用一个Cache缓存对象（使用<cache-ref>节点配置） -->
   	<cache-ref namespace="com.test.bean.Test2Mapper" /> <!-- configuration.addCacheRef("com.test.bean.TestMapper","com.test.bean.Test2Mapper"); builderAssistant.useCacheRef("com.test.bean.Test2Mapper"); -->
   	
   	<!-- 每一个Mapper分配一个Cache缓存对象（使用<cache>节点配置） -->
   	<cache type="PERPETUAL" eviction="LRU" flushInterval="" size="" readOnly="false" blocking="false"  > <!-- configuration.addCache(cache); builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props); -->
 		<property name="" value="" />
 		<property name="" value="" />
 	</cache>
 	
 	<!-- parameterMap -->
 	<parameterMap id="" type=""> <!-- configuration.addParameterMap(parameterMap); builderAssistant.addParameterMap(id, parameterClass, parameterMappings); -->
 		<parameter property="" javaType="" jdbcType="" resultMap="" mode="" typeHandler="" numericScale="" />
 		<parameter property="" javaType="" jdbcType="" resultMap="" mode="" typeHandler="" numericScale="" />
 	</parameterMap>
 	<parameterMap id="" type="">
 		<parameter property="" javaType="" jdbcType="" resultMap="" mode="" typeHandler="" numericScale="" />
 		<parameter property="" javaType="" jdbcType="" resultMap="" mode="" typeHandler="" numericScale="" />
 	</parameterMap>
 	
 	<!-- resultMap -->
 	<resultMap id="resultMap1" type="类型优先级1" ofType="类型优先级2" resultType="类型优先级3" javaType="类型优先级4" extends="" autoMapping=""> <!-- configuration.addResultMap(resultMap); builderAssistant.addResultMap(this.id, this.type, this.extend, this.discriminator, this.resultMappings, this.autoMapping); -->
  		<constructor>
    		<idArg property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
        	<arg property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
   	  	</constructor>
  		<discriminator column="" javaType="" jdbcType="" typeHandler="" >
  	 		<case value="" resultMap="" />
  	 		<case value="" resultMap="" />
  	 	</discriminator>
  		<id property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
  		<result property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
  		<result property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
   	</resultMap>
 	<resultMap id="resultMap2" type="类型优先级1" ofType="类型优先级2" resultType="类型优先级3" javaType="类型优先级4" extends="" autoMapping="">
  		<constructor>
    		<idArg property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
        	<arg property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
   	  	</constructor>
  		<discriminator column="" javaType="" jdbcType="" typeHandler="" >
  	 		<case value="" resultMap="" />
  	 		<case value="" resultMap="" />
  	 	</discriminator>
  		<id property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
  		<result property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
  		<result property="" column="" javaType="" jdbcType="" select="" notNullColumn="" columnPrefix="" typeHandler="" resultSet="" foreignColumn="" fetchType="lazy" />
   	</resultMap>
  		
	<!-- sql 语句片段，用于被包含 -->
	<sql databaseId="MySql" id="sql1" /> <!-- configuration.getSqlFragments().put("com.test.bean.TestMapper.sql1", context); -->
	<sql databaseId="Oracle" id="sql2" /> 
	<sql databaseId="" id="com.test.bean.TestMapper.sql3" /><!-- configuration.getSqlFragments().put("com.test.bean.TestMapper.sql2", context); -->
	<sql id="sql4"> uid,account,user_name </sql>
  		
  	<!-- select|insert|update|delete -->
  	<!-- select -->
  	<select id="" databaseId="MySql" fetchSize="" timeout="" parameterMap="" parameterType="" resultMap="" resultType="" lang="" resultSetType="" statementType="" 
 		flushCache="" useCache="" resultOrdered="" resultSets="" resultOrdered="" resultSets="" keyProperty="" keyColumn="" useGeneratedKeys=""> <!-- configuration.addMappedStatement(statement); builderAssistant.addMappedStatement(...); -->
	 	<include refid="" />
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	</select>
	<select id="selectUser" parameterType="java.lang.String" resultType="User">
		select <include refid="sql4"/> from user where uid = #{id};
	</select>
	<select id="selectAll" resultType="User">
		select * from user;
	</select>
	
	<!-- insert -->
 	<insert id="" databaseId="" fetchSize="" timeout="" parameterMap="" parameterType="" resultMap="" resultType="" lang="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver" 
 	    	resultSetType="" statementType="" flushCache="" useCache="" resultOrdered="" resultSets="" 
 	    	resultOrdered="" resultSets="" keyProperty="" keyColumn="" useGeneratedKeys="" >
	 	<include refid="" />
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	</insert>
	<insert id="insertUser" parameterType="User">
		insert into user(account,user_name,created_date) values(#{account},#{userName},now())
	</insert>
	<insert id="insertBatch" parameterType="java.util.List">
		insert into user(account,user_name,created_date) 
		values
		<foreach collection="list" item="item" index="index" separator="," >
			(#{item.account},#{item.userName},now())
		</foreach>
	</insert>
	<!-- update -->
 	<update id="" databaseId="" fetchSize="" timeout="" parameterMap="" parameterType="" resultMap="" resultType="" lang="" resultSetType="" statementType="" 
	 		flushCache="" useCache="" resultOrdered="" resultSets="" resultOrdered="" resultSets="" keyProperty="" keyColumn="" useGeneratedKeys="">
	 	<include refid="" />
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	</update>
	<!-- delete -->
 	<delete id="" databaseId="" fetchSize="" timeout="" parameterMap="" parameterType="" resultMap="" resultType="" lang="" resultSetType="" statementType="" 
	 		flushCache="" useCache="" resultOrdered="" resultSets="" resultOrdered="" resultSets="" keyProperty="" keyColumn="" useGeneratedKeys="">
	 	<include refid="" />
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	 	<selectKey resultType="" statementType="" keyProperty="" keyColumn="" order="BEFORE"></selectKey>
	</delete>
</mapper>